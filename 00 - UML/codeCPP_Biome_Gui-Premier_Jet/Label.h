#ifndef LABEL__H
#define LABEL__H

/////////////////////////////////////////////////
// Headers
/////////////////////////////////////////////////
#include "Gadget.h"
#include <SFML/Graphics.hpp>



namespace gui {



/////////////////////////////////////////////////
/// \brief Un simple label
///
/////////////////////////////////////////////////
class Label : public gui::Gadget {



/////////////////////////////////////////////////
// Méthodes
/////////////////////////////////////////////////

public:
public:
    /////////////////////////////////////////////////
    /// \brief Constructeur
    ///
    /////////////////////////////////////////////////
    Label ();

    /////////////////////////////////////////////////
    /// \brief Définie le texte à afficher.
    ///
    /// \param texte		 le nouveau texte du gadget.
    /////////////////////////////////////////////////
    void setTexte (std::string texte);

    /////////////////////////////////////////////////
    /// \brief Definie la taille du texte.
    ///
    /// \param taille		 La nouvelle taille du texte.
    /////////////////////////////////////////////////
    void setTaille (float taille);

    /////////////////////////////////////////////////
    /// \brief Definie la couleur du texte.
    ///
    /// \param couleur		 La nouvelle couleur du texte.
    /////////////////////////////////////////////////
    void setCouleur (sf::Color couleur);

    /////////////////////////////////////////////////
    /// \brief Défine le style du texte (sf::Text::Style).
    ///
    /// \param style		 Le style de texte à appliquer au gadget.
    /////////////////////////////////////////////////
    void setStyle (sf::Text::Style style);

    /////////////////////////////////////////////////
    /// \brief Definie la police du texte.
    ///
    /// \param police		 La nouvelle police du gadget.
    /////////////////////////////////////////////////
    void setPolice (sf::Font police);

    /////////////////////////////////////////////////
    /// \brief Traitement des évenements clavier ou souris.
    ///
    /// \param evenement		 L'évenemnt à tratier.
    /////////////////////////////////////////////////
    virtual void traiterEvenements (sf::Event evenement);

    /////////////////////////////////////////////////
    /// \brief Actualiser les éléments de l'interface.
    ///
    /////////////////////////////////////////////////
    virtual void actualiser ();

    /////////////////////////////////////////////////
    /// \brief Dessine tout les éléments de l'interface.
    ///
    /// \param target		 
    /// \param states		 
    /////////////////////////////////////////////////
    virtual void draw (sf::RenderTarget& target, sf::RenderStates states) const;



/////////////////////////////////////////////////
// Membres
/////////////////////////////////////////////////
private:
    sf::Text m_texte;    ///< Le texte sfml affiché.    

}; // fin class Label

} // fin namespace gui

#endif
